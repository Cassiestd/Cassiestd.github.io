<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java基础 on Cassie</title>
    <link>https://cassiestd.github.io/tags/java%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in Java基础 on Cassie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>© Copyright notice</copyright>
    <lastBuildDate>Tue, 12 May 2020 10:21:36 +0800</lastBuildDate>
    
	<atom:link href="https://cassiestd.github.io/tags/java%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java容器</title>
      <link>https://cassiestd.github.io/posts/java%E5%9F%BA%E7%A1%80/java%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Tue, 12 May 2020 10:21:36 +0800</pubDate>
      
      <guid>https://cassiestd.github.io/posts/java%E5%9F%BA%E7%A1%80/java%E5%AE%B9%E5%99%A8/</guid>
      <description>概览 Java容器主要包括Collection和Map两种，Collection存储对象集合，而Map存储键值对（两个对象）的映射表。
Collection Set  TreeSet：基于红黑树实现，支持有序性操作（通过其实现SortedSet接口也可看出）。但是查询效率不如HashSet，HashSet查找时间复杂度为O(1)，而TreeSet则为O(logN)。 HashSet：基于哈希表实现，支出快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息。 LinkedHashSet：具有HashSet的查找效率，并且内部使用双向链表维护元素的插入顺序。  List  ArrayList：基于动态数组实现，支持随机访问。 Vector：和ArrayList类似，但是它是线程安全的。 LinkedList：基于双向链表实现，只能顺序访问，但是可以快速的在链表中插入和删除。不仅如此，LinkedList还可以用作栈、队列和双向队列 。  Queue  LinkedList：可以用它来实现双向队列。 PriorityQueue：基于堆结构实现，可以用它来实现优先队列。  Map  TreeMap：基于红黑树实现。 HashMap：基于哈希表实现。 HashTable：和HashMap类似，但是它是线程安全的， 这意味着同一时刻多个线程同时写入HashTable不会导致数据不一致 。但是它是遗留类，不应该去使用它，而是使用ConcurrentHashMap来支持线程安全，ConcurrentHashMap的效率会更高，因为ConcurrentHashMap引入和分段锁。 LinkedHashMap：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用顺序。  容器中的设计模式 迭代器模式 Collection继承了Iterable接口，其中的iterator()方法能够产生一个Iterator对象，通过这个对象就可迭代遍历Collection中的元素。
从JDK1.5之后就可以使用foreach方法来遍历实现了Iterable接口的聚合对象。例如：
ArrayList&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); list.add(&amp;#34;笨笨&amp;#34;); list.add(&amp;#34;蠢蠢&amp;#34;); for (String v:list){ System.out.println(v); } 适配器模式 java.util.Arrays.asList()可以把数组类型转换成List类型。需要注意的事，asList()参数为泛型的变长参数，不能使用基本类型数组作为参数，只能使用相应的包装类型数组。
asList()的实现代码如下：
@SafeVarargs @SuppressWarnings(&amp;#34;varargs&amp;#34;) public static &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; asList(T... a) { return new ArrayList&amp;lt;&amp;gt;(a); } 调用asList()的两种方式如下：
//方式一 Integer[] args={1,2,3}; List&amp;lt;Integer&amp;gt; integers = Arrays.</description>
    </item>
    
    <item>
      <title>泛型</title>
      <link>https://cassiestd.github.io/posts/java%E5%9F%BA%E7%A1%80/%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Fri, 01 Nov 2019 19:33:36 +0800</pubDate>
      
      <guid>https://cassiestd.github.io/posts/java%E5%9F%BA%E7%A1%80/%E6%B3%9B%E5%9E%8B/</guid>
      <description>前言 Java中的泛型支持是从JDK1.5开始的，目的是 让集合能够记住其元素的数据类型 。在没有泛型之前，将元素放在集合中，此元素会被当成Object类型来处理，但是用泛型可以让集合记住元素的数据类型（当然，此时集合只能存放同种类型的元素）。
初识泛型 一个使用泛型的例子如下：
@Test public void test11(){ //①不使用泛型时，集合中的元素都被当成Object类型的元素 ArrayList listOne = new ArrayList(); listOne.add(1); //必须将Object类型的元素强转为Integer，编译才能通过 Integer a=(Integer)listOne.get(0); //②使用泛型时，集合可以记住元素的类型 ArrayList&amp;lt;Integer&amp;gt; listTwo = new ArrayList&amp;lt;&amp;gt;(); listTwo.add(1); //此时不需要进行强制类型转换，应为取出元素时，可以记住其元素类型：Integer Integer b=listTwo.get(0); } Java7支持的泛型菱形语法 上一节的例子当中使用泛型时，调用构造器时给出了完整的泛型信息，其实我们声明变量便已经给了泛型信息了，此做法显得多余，所以构造器后的泛型信息可以省略。如：List&amp;lt;Integer&amp;gt; a=new ArrayList&amp;lt;&amp;gt;(); ，这样的语法中，省略了构造器后的菱形中的泛型信息，此所谓泛型的菱形语法（仅支持Java7以上的版本）。
泛型接口、泛型类和泛型方法 泛型就是在定义此接口、类和方法的时候使用了类型形参，这个类型形参将在声明变量，创建对象，调用方法时动态的指定（类似给函数形参赋形参的过程），类型形参能够在整个接口、类体、方法体内当成类型使用。一个简单的例子如下：
@Test public void test12(){ class Test&amp;lt;E&amp;gt;{ public void say(E e){ System.out.println(&amp;#34;类型实参的类型为：&amp;#34;+e.getClass()); } public ArrayList&amp;lt;E&amp;gt; get(){ ArrayList&amp;lt;E&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); return list; } } //传入的泛型实参为Object，所以E为Object，在泛型类内都可以使用此泛型参数 Test&amp;lt;Object&amp;gt; testOne = new Test&amp;lt;&amp;gt;(); //E为Object，所以sya()方法的形参e能够是任何类型的值（都是Object的子类） testOne.</description>
    </item>
    
    <item>
      <title>集合</title>
      <link>https://cassiestd.github.io/posts/java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88/</link>
      <pubDate>Fri, 18 Oct 2019 19:50:36 +0800</pubDate>
      
      <guid>https://cassiestd.github.io/posts/java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88/</guid>
      <description>概述  集合类也被称为 容器 ，所有的集合都位于java.util包下。 集合类家族主要由Collection和Map接口派生出。 集合相比数组的优势是：长度可变，且能存储不同类型的对象。Map还能存储映射关系。 集合只能存储对象，不能存储基本类型的值。 Set代表无序不可重复，List代表有序可重复，Map代表无序不可重复键值的映射，Queue代表队列集合。  Collection的家谱如下图：
Map的家谱如下图：
Collection和Iterator Collection是Set、List和Queue父接口，此接口定义了一些操作结合元素的基本方法。可以查看Java8的api文档。此外，Collection定义了一个返回迭代器的方法iterator(),返回一个Iterator类型的迭代器，Iterator必须依赖于Collection对象，迭代器主要如下有三个方法：
 boolean hasNext():如果被迭代的集合元素还没有被遍历，则返回true。 Object next():返回集合里的下一个迭代对象。 void remove():删除集合里上一次next方法返回的元素。  一个Iterator的使用例子如下（也包括了foreach的使用）：
@Test public void test_1(){ List&amp;lt;String&amp;gt; a=new ArrayList&amp;lt;&amp;gt;(); for(int i=0;i&amp;lt;5;i++){ a.add(&amp;#34;我是&amp;#34;+i); } Iterator&amp;lt;String&amp;gt; iterator=a.iterator(); while(iterator.hasNext()){ String temp=iterator.next(); if(temp.equals(&amp;#34;我是2&amp;#34;)){ iterator.remove(); } System.out.println(temp); } System.out.println(&amp;#34;------------分割线---------------&amp;#34;); for(String v:a){ System.out.println(v); } } 输出结果如下图：
Notice: Iterator方式和foreach方式迭代过程中，不能直接对集合进行改变，否则会报错： java.util.ConcurrentModificationException ,所有的内部基于数组来实现的集合，最好用随机访问，其他的采用迭代访问。
Set集合 Set判断两个对象相等的原则是：两个对象用equals方法返回true。在此基础上再来了解HashSet、SortedSet、LinkedHashSet。
HashSet  HashSet判断两个对象是否相等的条件是： 两个对象通过equals()方法返回true且两者的hashCode()方法返回值相等。 此外，如果两个对象的equals()返回false，但hashCode()返回的值相同，HashSet会将两个对象存储在相同的位置，使用链表结构保存，会导致性能下降。 HashSet按照Hash算法来存储集合中的元素，具有 很好的存取和查找性能。 多个线程同时访问HashSet需要通过代码保证其同步。 集合元素可以为null 需要被保存到HashSet中的对象，需要重写其equals()和hashCode()方法，保证两者通过equals()方法返回为true时，两者的hashCode()方法返回也相同。 当HashSet中存储了对象时，此时再修改它，可能会导致它与其他对象相等（值相等），此时会导致HashSet无法准确的访问元素。  一个例子如下：</description>
    </item>
    
    <item>
      <title>面向对象(二)</title>
      <link>https://cassiestd.github.io/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%BA%8C/</link>
      <pubDate>Tue, 01 Oct 2019 21:31:36 +0800</pubDate>
      
      <guid>https://cassiestd.github.io/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%BA%8C/</guid>
      <description>包装类 基本数据类型不具备“对象”的特性，它没有属性，没有方法。为了解决这个问题。Java提供了包装类为8种基本数据类型的分别定义了相应的引用类型，并称之为基本数据类型的 包装类 ，对应关系如下表：
   基本数据类型 包装类     byte Byte   short Short   int Integer   long Long   float Float   double Double   char Character   boolean Boolean    包装类对象和基本数据类型变量之间的转换  将基本类型变量转换为包装类对象：通过调用对应包装类的构造器来实现，此外，可以调用对应包装类的 parse() 方法来将一个字符串转换为相应包装类的对象。 将包装类对象转换为基本类型变量：通过对应包装类的 xxxValue() 方法来实现。 通过自动装箱和自动拆箱来实现两者的互转： 自动装箱就是将一个基本类型变量直接赋值给对应的包装类变量；自动拆箱就是把一个包装类直接赋值给一个对应的基本数据类型。  包装类对象和字符串之间的转换  将字符串转换为包装类对象：调用对应包装类的 parseXxx() 方法，传入的参数为可转换的字符串；调用对象包装类的构造器，传入可转换的字符串。 将包装类对象转换为字符串：调用字符串的 valueOf() 方法，传入的参数为包装类对象；将包装类对象与 &amp;quot;&amp;quot; 相加。  包装类对象的比较  可以将包装类对象直接与可以比较的基本数据变量进行比较。 包装类对象直接的比较不能简单的认为其包装的值相等两者就相等（应为包装类利用了cache的机制，可能两个包装相同数值的包装类对象不是同一个对象），需要用包装类的 compareTo()方法。  处理对象 打印对象 当我们通过 System.</description>
    </item>
    
    <item>
      <title>面向对象(一)</title>
      <link>https://cassiestd.github.io/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%80/</link>
      <pubDate>Wed, 25 Sep 2019 10:31:36 +0800</pubDate>
      
      <guid>https://cassiestd.github.io/posts/java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%80/</guid>
      <description>概述  面向对象三大特征： 封装，继承，多态 类可以被认为是一种自定义的数据类型，可以使用类来定义变量，所有使用类定义的变量都是 引用变量 ，他们将会引用到类的对象。 初始化块 总是在构造器执行之前被调用 静态初始化 块用于初始化类，在类初始化阶段被执行  关于类的知识点  所有类都是引用类型 类的修饰符只能是：public,default,abstract,final 类内的static就是为了区分被修饰的东西是属于类的，还是属于类的对象的 static修饰的成员不能访问没有static修饰的成员 如果一个类没有写构造器，那么系统将提供一个默认的无参构造器。但是一旦写了构造器，系统将不再提供默认构造器 类的属性的修饰符只能是：public,default,protected,private,static,final.前四个最多只能出现一个，可以与static,final组合起来使用 类的属性包括： 类变量 和 实例变量 ,用static的修饰的属性就是类变量 类的构造器的修饰符只能是：public,default,protected,private三者之一 声明类的构造器的时候， 不要声明返回值 ，如果写的构造方法写了返回值，则会被当成普通方法编译 静态变量和静态方法可以直接被类调用，也可以被类的对象调用  对象，引用，指针知识点  java不能直接访问堆内存中的对象，只能通过该对象的引用操作对象 堆内存的对象可以有多个引用，即多个引用指向同一个对象 如果希望垃圾回收机制回收某个对象，只需切断该对象的所有引用变量与该对象的联系即可 this关键字总是指向调用该方法的对象，其中构造器中的this是引用正在进行初始化的对象 可以把this作为方法的返回值，返回该方法的对象  方法知识点  java里的方法不能独立存在，必须定义在类内 java的方法的参数传递只有一种： 值传递 值传递的实质 ：系统为形参执行初始化，把实参变量的值赋给赋值给方法的形参变量，方法里操作的不是实际的实参变量 当方法的参数传递的是一个引用类型的参数时，实际上是把 实参变量的内容——对象的地址 ，复制给了形参变量，所以形参和实参指向同一个对象，在方法里操作形参，其实和在方法外操作实参是一样的 JDK1.5之后， java允许定义形参个数可变的参数 ，方法为：在 最后一个形参的类型后 增加三点(&amp;hellip;)，注意： 形参个数可变的那个形参，可以接受0个和1个形参 ，接受后的形参被当成 数组 处理 形参个数可变的参数可以接收一个 数组 方法 重载 要求两同一不同：同一个类中的同名方法，其形参列表不同。方法的其他部分与方法重载没有任何关系。  成员变量和局部变量知识点  成员变量无需显示初始化，系统将在类的准备阶段或者创建该类的实例时进行默认初始化，其初始化的赋值规则与数组动态初始化时数组元素的赋值规则完全相同。 局部变量包括： 形参，方法局部变量，代码块局部变量 。 局部变量除了形参，都必须显示初始化才能使用。 代码块内的局部变量的作用域就只在当前代码块内。 一个类不能定义两个同名的成员变量，即使一个是静态变量，一个是实例变量。 一个方法里不不能定义两个同名的局部变量，即使一个是方法内局部变量，一个代码块局部变量或者形参。  隐藏和封装知识点  访问控制级别由严格到宽松：private-&amp;gt;default-&amp;gt;protected-&amp;gt;public。 需要注意的是： protected的访问权限比default宽松，protected修饰的成员可以被同一个包中的其他类访问，也可以被不同包中的子类访问 。 局部变量不能使用访问控制符修饰。 如果一个java文件定义的所有类都没有使用public修饰，那么此java文件的命名可以是一切合法的文件名；但是如果一个java文件定义的类中有一个public修饰的类，那么此java文件只能与此类名相同。最后， 一个java文件最多只能由一个public修饰的类 。 一个java源文件只能定义一个包，即只能包含一个package语句。 import语句还有一个 静态导入 的方法：import static package.</description>
    </item>
    
    <item>
      <title>流程控制与数组</title>
      <link>https://cassiestd.github.io/posts/java%E5%9F%BA%E7%A1%80/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 15 Sep 2019 23:31:36 +0800</pubDate>
      
      <guid>https://cassiestd.github.io/posts/java%E5%9F%BA%E7%A1%80/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%95%B0%E7%BB%84/</guid>
      <description>分支结构 if条件语句  if,else if,else后的代码块只有一条语句时（可以是空语句），可以省略花括号。 使用if,else时一定要先考虑小的范围。  switch分支语句  switch后的控制表达式的数据类型只能是：byte，short，int，char。不能是boolean。Java7还允许是String类型。 允许省略case后的花括号。 不要忘了当一个case块写完时，以break结尾，否则将继续执行，直到遇到break或运行switch完毕才结束。  一个写法案例如下：
char a=97; //符合条件&amp;#39;a&amp;#39; switch (a){ case &amp;#39;a&amp;#39;: System.out.println(&amp;#34;一概窝里GIAOGIAO！&amp;#34;); System.out.println(&amp;#34;我是char类型的a&amp;#34;); break; case &amp;#39;b&amp;#39;: System.out.println(&amp;#34;我是b&amp;#34;); break; default: System.out.println(&amp;#34;我是default呜呜呜&amp;#34;); } 循环结构 循环语句可能包含如下四个部分：
 初始化语句：一条或者多条语句，完成一些初始化操作，在循环开始前执行。 循环条件：一个布尔表达式，决定是否执行循环体。 循环体：循环的主体内容。 迭代语句：在循环条件执行之前执行，控制循环条件的变量，使之能够在合适的条件下结束循环。  while循环语句 一个简单的案例如下：
int i=1; //初始化语句 while(i&amp;lt;11) { //循环条件 System.out.println(&amp;#34;i=&amp;#34;+i); //循环体 ++i; //迭代语句 } 此语句容易范的 错误 是： 在while()后加一个封号
do while循环语句 do while与while的区别在于：do while先执行循环体，再执行循环条件，而while是先执行循环条件，条件允许时才能执行循环体。一个简单的案例如下：
int i=1; //初始化语句 do{ System.out.println(&amp;#34;i=&amp;#34;+i); //循环体 ++i; //迭代语句 }while (i&amp;lt;11); //循环条件 此语句容易犯的一个 错误是 ： while()后没加封号</description>
    </item>
    
    <item>
      <title>数据类型和运算符</title>
      <link>https://cassiestd.github.io/posts/java%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Wed, 04 Sep 2019 22:48:36 +0800</pubDate>
      
      <guid>https://cassiestd.github.io/posts/java%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>注释  单行注释：使用//即可 多行注释：使用/*注释内容*/即可 文档注释：以/**开始，以*/结束  标识符和关键字  允许一行书写多个语句，每个语句之间用封号隔开。 一个语句可以跨越多行，但是变量名和字符串不能跨越多行 java的标识符以大小写字母，下划线，数字和美元符组成，且数字不能打头  数据类型分类  java是一种强数据类型 java支持的数据类型分为：基本类型和引用类型 基本数据类型分为四类：  整数类型：byte(1字节),short(2字节),int(4字节),long(8字节) 字符类型：char(2字节) 浮点类型：float(4字节),double(8字节) 布尔类型：boolean(1位)   整型  一个java整型常量默认就是int类型 将一个较小的整型常量赋值给一个byte或者short，系统会自动把这个整数常量当成byte或者short处理。 如果使用一个巨大 的整型常量，系统不会自动把这个整数当成long型处理。如果希望将这个整数常量当成一个long型处理，可以加一个L后缀（或者l后缀） 如果将一个较小的整型常数（0~65535）赋值给char类型，系统会自动把这个整数当成char类型  测试如下：
byte a=12; short b=13; int c=123456789; //此语句报错：Integer number too large，默认整型直接量为int类型，此时超过了int的范围 //long cc=123456789123; //此语句才是正确的 long cc=123456789123L; char d=97; //系统自动将int类型的直接量当成了char处理，所以会输出97的Unicode码：a System.out.println(d); //输出：a 字符型 字符型常量 有三种表示形式 1. 通过单个字符来直接指定字符型常量，例如&#39;a&#39; 2. 直接使用Unicode值来表示字符型常量，格式为\u9999,其中的数字是一个十六进制的整数 3. 通过转义字符表示特殊的字符型常量，例如\n和\t等
测试如下：
char a=97; //97这个int类型的整数常量被系统自动当成了char类型 char b=&amp;#39;a&amp;#39;; char c=&amp;#39;\u9999&amp;#39;; char d=&amp;#39;\t&amp;#39;; char e=&amp;#39;淦&amp;#39;; //通过单个字符指定字符常量，可以是汉字 //将输出：a---a---香--- ---淦 System.</description>
    </item>
    
  </channel>
</rss>
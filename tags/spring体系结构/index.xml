<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring体系结构 on Cassie</title>
    <link>https://cassiestd.github.io/tags/spring%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in Spring体系结构 on Cassie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>© Copyright notice</copyright>
    <lastBuildDate>Tue, 05 Nov 2019 08:28:36 +0800</lastBuildDate>
    
	<atom:link href="https://cassiestd.github.io/tags/spring%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring入门</title>
      <link>https://cassiestd.github.io/posts/2020-06-07/spring%E5%85%A5%E9%97%A8/</link>
      <pubDate>Tue, 05 Nov 2019 08:28:36 +0800</pubDate>
      
      <guid>https://cassiestd.github.io/posts/2020-06-07/spring%E5%85%A5%E9%97%A8/</guid>
      <description>Spring简介 Spring是一个轻量级的Java开发框架， 目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。
Spring体系结构 Spring的体系结构图如下：
Core Container  Core模块：提供框架的基本组成部分，包括控制反转（Inversion of Control，IoC）和依赖注入（Denpendency Injection，DI）。 Beans：提供了BeanFactory，是工厂模式的典型实现， Spring将管理对象称为Bean。 Context：建立在Core和Beans的基础上，提供一个 框架式的对象访问方式，是访问定义和配置的任何对象的媒介。 常用接口为ApplicationContext。 SpEl： 提供强大的表达式语言去支持运行时查询和操作对象图。  Test 此模支持使用 JUnit或TestNG 对Spring组件进行单元测试和集成测试。
AOP、Aspects、Instrumentation和Messaging  AOP： 提供了一个符合AOP要求的面向切面的编程实现，允许定义方法拦截器和切入点，将代码按照功能进行分离，以便干净的解构。 Aspects：提供了与AspectJ的集成功能，AspectJ是一个功能强大且成熟的AOP框架。 Instrumentation：提供了类植入（Instrumentation）支持和类加载器的实现，可以在特定的应用服务器中使用。 Messaging：此模块是Spring 4.0以后新增的，提供了对消息传递体系结构和协议的支持。  Data Access/Integration  JDBC：提供了一个JDBC的抽象层，消除了繁琐的JDBC编码和数据库厂商特有的错误代码解析。 ORM：为流行的 对象关系映射（Object Relational Mapping）API提供集成层。 此模块可以将O/R映射框架与Spring提供的所有其他功能结合使用，例如声明式事务管理功能。 OXM：提供了一个支持对象/XML映射的抽象层实现，例如：JAXB、Castor等。 JMS：指JAVA消息传递服务（Java Message Server），包含用于生产和使用消息的功能。 Transactions：支持用于实现特殊接口和所有POJO类的编程和声明式事务管理。  Web  WebSocket：Spring 4.0以后新增的模块，提供了WebSocket和SockJS的实现。 Servlet：也成为webmvc模块，包含用于Web应用程序的SpringMVC和REST Web Services实现。Spring MVC框架提供了领域模型代码和Web表单之间的清晰分离，并与Spring FrameWork的所有其他功能集成。 Web：提供了基本的Web开发集成功能，例如：文件上传、使用一个Servlet监听器初始化一个IoC容器以及Web应用上下文。 Portlet：类似于Servlet模块的功能，提供了Portlet环境下的MVC的实现。  Spring目录结构 下载Spring Framework解压后，得到如下图所示的目录结构：
其中，docs目录是Spring的API文档和开发规范；libs是Spring应用所需要的JAR包和源代码；schema是Spring应用所需要的schema文件，这些schema文件定义了Spring相关配置文件的约束。其中， libs下有三类JAR文件：以RELEASE.jar结尾的是开发时所需要的JAR包；以RELEASE-source.jar结尾的时源文件的压缩包；以RELEASE-javadoc.jar结尾的是API文档的压缩包。
Notice： Spring框架依赖于Apache Commons Logging组件，需要配合commons-logging的JAR包才能使用。</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on Cassie</title>
    <link>https://cassiestd.github.io/tags/spring/</link>
    <description>Recent content in Spring on Cassie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>© Copyright notice</copyright>
    <lastBuildDate>Tue, 12 Nov 2019 09:00:36 +0800</lastBuildDate>
    
	<atom:link href="https://cassiestd.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring IoC</title>
      <link>https://cassiestd.github.io/posts/2020-06-07/spring-ioc/</link>
      <pubDate>Tue, 12 Nov 2019 09:00:36 +0800</pubDate>
      
      <guid>https://cassiestd.github.io/posts/2020-06-07/spring-ioc/</guid>
      <description>Spring IoC基本概念 控制反转（IoC，Inversion of Control） 是Spring框架的基础，也是Spring的核心理念，用于消减计算机程序的耦合的问题。 依赖注入（DI，Dependency Injection）是IoC的另外一种说法 ，只是从不同角度描述相同的概念。
当一个Java对象调用另一个对象时，传统编程模式下，我们通常使用new的方式创建一个对象，这种方式会增加调用者和被调用者之间的耦合性，不利于后期的维护和升级。Spring框架的出现就是为了解决这个耦合的问题。其中重要的两个概念如下：
 控制反转：调用者不再通过new的方式创建被调用者对象，而是由Spring容器来负责创建，创建对象的控制权由调用者转移到了Spring容器，控制权发生了反转，此所谓 控制反转 。 依赖注入：调用者组合被调用者时，Spring容器负责将被依赖的对象赋值给该组合成员变量，相当于为调用者注入了它所依赖的实例，此所谓 依赖注入 。  综上所述， 在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入。
Spring IoC容器 实现控制反转的是Spring IoC容器。 Spring IoC容器的设计主要是基于BeanFactory，ApplicationContext两个接口。
BeanFactory BeanFactory是一个管理Bean的工厂，主要负责初始化各种Bean。此接口主有多个实现类，比较常用的是XmlBeanFactory，该类会根据XML配置文件中的定义来装配Bean（需要提供XML文件的绝对路径）。此种方法已过时，不推荐使用了。一个例子如下：
XmlBeanFactory xmlBeanFactory = new XmlBeanFactory(new FileSystemResource(&amp;#34;E:\\ideaProject\\SpringTest\\res\\spring\\applicationContext.xml&amp;#34;)); Student student =(Student) xmlBeanFactory.getBean(&amp;#34;student&amp;#34;); ApplicationContext ApplicationContext接口是BeanFactory的子接口，也称为 应用上下文 ，ApplicationContext接口除了包含BeanFactory接口的所有功能意外，还添加了对国际化、资源访问、事件传播等内容的支持。创建ApplicationContext接口实例通常有三种方法：
 通过ClassPathXmlApplicationContext创建。 通过FileSystemXmlApplicationContext创建。 通过Web服务器实例化ApplicationContext创建。  方式1的实例代码如下：
//利用ApplicationContext实现控制反转 ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(&amp;#34;spring/applicationContext.xml&amp;#34;); Student student0=(Student)applicationContext.getBean(&amp;#34;student&amp;#34;); student0.setName(&amp;#34;GIAO！&amp;#34;); System.out.println(student0); 方式2的实例代码如下（需要XMl配置文件的绝对路径）：
FileSystemXmlApplicationContext applicationContext = new FileSystemXmlApplicationContext(&amp;#34;E:\\ideaProject\\SpringTest\\res\\spring\\applicationContext.xml&amp;#34;); Student student=(Student)applicationContext.getBean(&amp;#34;student&amp;#34;); student.setNumber(4041); System.out.println(student); 方式3，需要在j2ee项目的web.xml中进行配置，以后等到mvc再举例。</description>
    </item>
    
  </channel>
</rss>